#!ruby

=begin

- 拡張属性名を表示する

        $ extattr [-l] [-U | -S] [file...]

        ディレクトリを指定した場合は、そのディレクトリと直下のエントリについて一覧表示する

        ただし、ls と同様に "-d" スイッチをつけた場合は直下のエントリは表示しない

- 拡張属性を定義する

        $ extattr -s attr-name=attr-value [-U | -S] [-f | -n | -i] file...

- 拡張属性を表示する

        $ extattr -g attr-name [-U | -S] file...

- 拡張属性を削除する

        $ extattr -c attr-name [-U | -S] file...

- (FUTURE) 拡張属性をパターンに従って表示する

        $ extattr -G pattern [-U | -S] file...

- (FUTURE) 拡張属性をパターンに従って削除する

        $ extattr -D pattern [-U | -S] file...

=end

require "extattr"
require "optparse"


module MyExtensions
  unless Dir.respond_to?(:children)
    refine Dir.singleton_class do
      def children(path)
        children = entries(path)
        children.reject! { |e| e == "." || e == ".." }
        children.sort!
        children
      end
    end
  end

  unless Dir.respond_to?(:each_child)
    refine Dir.singleton_class do
      def each_child(path, &block)
        return to_enum(__method__, path) unless block_given?
        children(path).each(&block)
        nil
      end
    end
  end

  refine Array do
    def to_plain_text(nest = 0, output = "")
      nest += 1
      each { |e| e.to_plain_text(nest, output); output << "\n" }
      output
    end
  end

  refine Hash do
    def to_plain_text(nest = 0, output = "")
      indent = "\t" * nest
      nest += 1
      each { |k, v| output << %(#{indent}#{k} \t#{v}\n) }
      output
    end
  end

  refine String do
    def to_plain_text(nest = 0, output = "")
      indent = "\t" * nest
      output << gsub(/^/, indent)
    end
  end
end

using MyExtensions


opt = OptionParser.new(nil, 12, " ")
mode = :list
extattr = nil

opt.separator("operators:")
opt.on("-l", "list extattr (default)") { mode = :list }
opt.on("-g name", "get extattr") { |v| mode = :get; extattr = v }
opt.on("-s name=val", "set extattr", /\A.+=.*/) { |v| mode = :set; extattr = v }
opt.on("-c name", "clear extattr") { |v| mode = :delete; extattr = v }
opt.on("-V", "print version") { mode = :print_version }

opt.separator("")
opt.separator("switches:")
namespace = File::EXTATTR_NAMESPACE_USER
opt.on("-U", "change namespace to user") { namespace = File::EXTATTR_NAMESPACE_USER }
opt.on("-S", "change namespace to system") { namespace = File::EXTATTR_NAMESPACE_SYSTEM }

opt.separator ""
value_only = false
opt.on("-0", "not print LF and print value only (with `-g' operator)") { value_only = true }
value_stdin = false
opt.on("-I", "Input from stdin for attr-value (with `-s' operator)") { value_stdin = true }
list_children = true
opt.on("-d", "not print child entries (with `-l' operator)") { list_children = false }
format = ->(doc) { doc.to_plain_text }
opt.on("-Y", "print to YAML format") {
  require "yaml"
  format = ->(doc) { doc.to_yaml }
}
opt.on("-J", "print to JSON format") {
  require "json"
  format = ->(doc) { doc.to_json }
}

opt.separator ""
overwrite = nil
opt.on("-f", "force overwrite") { overwrite = true }
opt.on("-n", "do not overwrite") { overwrite = false }
opt.on("-i", "interactive confirm when overwrite") { overwrite = nil }
opt.parse!


def direxpand(path)
  if File.directory? path
    yield path
    Dir.glob(File.join(path.gsub(/[\[\{\}\*\?\,]/, "[\\0]"), "*"), File::FNM_DOTMATCH).sort.each do |path1|
      next if path1 =~ /(?:^|\/)\.+$/

      yield path1
    end
  else
    yield path
  end

  path
end

def list(path, namespace: nil)
  list = File.extattr_list!(path, namespace: namespace)
  unless list.empty?
    puts "#{path} \t#{list.join("\t")}"
  end
end

def list_files(files, list_children, namespace)
  files.each do |path|
    begin
      list path, namespace: namespace
    rescue SystemCallError
      $stderr.puts "#{File.basename $0}: #$! (#{$!.class})\n"
    else
      begin
        if File.directory?(path) && list_children
          Dir.children(path).sort.each do |e|
            begin
              list File.join(path, e), namespace: namespace
            rescue SystemCallError
              #$stderr.puts "#{File.basename $0}: #$! (#{$!.class})\n"
            end
          end
        end
      rescue SystemCallError
        $stderr.puts "#{File.basename $0}: #$! (#{$!.class})\n"
      end
    end
  end
end

def get_to_print(list, extattr, namespace, value_only, ignore_error: false, &block)
  list = list.reduce({}) do |a, path|
    begin
      v = File.extattr_get!(path, extattr, namespace: namespace)
      v.encode!("utf-8", "utf-8") rescue nil unless value_only
      a[path] = v
    rescue SystemCallError
      $stderr.puts "#{File.basename $0}: #$! (#{$!.class})\n" unless ignore_error
    end

    a
  end

  puts yield(list)
end

def confirm_overwrite(mesg)
  while true
    $stderr.print "#{mesg}\n\toverwrite? (y/n): "
    case $stdin.gets.chomp.downcase
    when "y", "yes"
      return true
    when "n", "no"
      return false
    else
      #$stderr.puts "-- once again --"
    end
  end
end


if mode == :print_version
    puts <<-EOS
#{File.basename $0}:
  version: #{ExtAttr::VERSION}
  runtime ruby engine: #{RUBY_DESCRIPTION}
    EOS
    exit 0
end

if ARGV.empty?
  case mode
  when :list
    Dir.glob("*", File::FNM_DOTMATCH).sort.each do |path|
      next if path =~ /(?:^|\/)\.+$/

      begin
        list path, namespace: namespace
      rescue SystemCallError
        $stderr.puts "#{File.basename $0}: #$! (#{$!.class})\n"
      end
    end
  when :get
    list = Dir.children(".")
    list.sort!
    get_to_print(list, extattr, namespace, value_only, ignore_error: true, &format)
  else
    $stderr.puts "#{File.basename $0}: should be given filename\n"
    exit 1
  end
else
  case mode
  when :list
    list_files(ARGV, list_children, namespace)
  when :get
    get_to_print(ARGV, extattr, namespace, value_only, &format)
  when :set
    (name, *, value) = extattr.partition("=")
    if value_stdin
      unless value.empty?
        $stderr.puts "#{File.basename $0}: Ignored given value in command line, for stdin - ``#{value}''\n"
      end
      value = $stdin.read
    end
    ARGV.each do |path|
      if File.extattr_list!(path, namespace: namespace).include?(name)
        case overwrite
        when nil
          next unless confirm_overwrite "`#{name}' is exist already in `#{path}'"
        when false
          next
        end
      end

      begin
        File.extattr_set!(path, name, value, namespace: namespace)
      rescue SystemCallError
        $stderr.puts "#{File.basename $0}: #$! (#{$!.class})\n"
      end
    end
  else
    raise NotImplementedError
  end
end
